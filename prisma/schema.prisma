// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  SUPERVISOR
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  role          UserRole
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  studentProfile     StudentProfile?
  supervisorProfile  SupervisorProfile?
  adminProfile      AdminProfile?
  thesesSubmitted    Thesis[]        @relation("StudentThesis")
  thesesSupervised   Thesis[]        @relation("SupervisorThesis")
  notifications      Notification[]
  enrollments        Enrollment[]
  supervisorCourses  SupervisorCourse[]
  submissions        AssignmentSubmission[]
}

model StudentProfile {
  id              String    @id @default(uuid())
  studentId       String    @unique
  department      String
  program         String
  enrollmentYear  Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SupervisorProfile {
  id              String    @id @default(uuid())
  department      String
  specialization  String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SupervisorCourse {
  id            String    @id @default(uuid())
  supervisor    User      @relation(fields: [supervisorId], references: [id], onDelete: Cascade)
  supervisorId  String
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([supervisorId, courseId])
  @@index([supervisorId])
  @@index([courseId])
}

enum ThesisStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  NEEDS_REVISION
  APPROVED
  REJECTED
}

model Thesis {
  id            String        @id @default(uuid())
  title         String
  abstract      String
  status        ThesisStatus  @default(DRAFT)
  submissionDate DateTime     @default(now())
  lastUpdated   DateTime      @updatedAt
  
  // Relations
  student       User          @relation("StudentThesis", fields: [studentId], references: [id])
  studentId     String
  supervisor    User          @relation("SupervisorThesis", fields: [supervisorId], references: [id])
  supervisorId  String
  revisions     ThesisRevision[]
  feedback      ThesisFeedback[]

  @@index([studentId])
  @@index([supervisorId])
}

model ThesisRevision {
  id          String    @id @default(uuid())
  version     Int
  document    String    // URL or path to the document
  comments    String?
  thesis      Thesis    @relation(fields: [thesisId], references: [id], onDelete: Cascade)
  thesisId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([thesisId])
}

model ThesisFeedback {
  id          String    @id @default(uuid())
  comments    String
  thesis      Thesis    @relation(fields: [thesisId], references: [id], onDelete: Cascade)
  thesisId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([thesisId])
}

model Notification {
  id          String    @id @default(uuid())
  title       String
  message     String
  isRead      Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@index([userId])
}

model AdminProfile {
  id              String    @id @default(uuid())
  department      String
  position        String
  permissions     String[]  // Array of permission strings
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Course {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  category    String   // e.g., "School of Information Technology_T324"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enrollments Enrollment[]
  supervisors SupervisorCourse[]
  assignments Assignment[]
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

enum AssignmentStatus {
  PENDING
  SUBMITTED
  GRADED
}

model Assignment {
  id          String    @id @default(uuid())
  title       String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  submissions AssignmentSubmission[]

  @@index([courseId])
}

model AssignmentSubmission {
  id            String           @id @default(uuid())
  assignment    Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId  String
  student       User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     String
  fileUrl      String
  status        AssignmentStatus @default(PENDING)
  grade         Float?
  feedback      String?
  submissionDate DateTime        @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
}
